/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jp.gr.java_conf.afterthesunrise.thadoop.sample;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThadoopSampleCollection implements org.apache.thrift.TBase<ThadoopSampleCollection, ThadoopSampleCollection._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThadoopSampleCollection");

  private static final org.apache.thrift.protocol.TField FIELD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldSet", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldMap", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThadoopSampleCollectionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThadoopSampleCollectionTupleSchemeFactory());
  }

  private List<ThadoopSample> fieldList; // optional
  private Set<ThadoopType> fieldSet; // optional
  private Map<String,ByteBuffer> fieldMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD_LIST((short)1, "fieldList"),
    FIELD_SET((short)2, "fieldSet"),
    FIELD_MAP((short)3, "fieldMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_LIST
          return FIELD_LIST;
        case 2: // FIELD_SET
          return FIELD_SET;
        case 3: // FIELD_MAP
          return FIELD_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FIELD_LIST,_Fields.FIELD_SET,_Fields.FIELD_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_LIST, new org.apache.thrift.meta_data.FieldMetaData("fieldList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThadoopSample.class))));
    tmpMap.put(_Fields.FIELD_SET, new org.apache.thrift.meta_data.FieldMetaData("fieldSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThadoopType.class))));
    tmpMap.put(_Fields.FIELD_MAP, new org.apache.thrift.meta_data.FieldMetaData("fieldMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThadoopSampleCollection.class, metaDataMap);
  }

  public ThadoopSampleCollection() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThadoopSampleCollection(ThadoopSampleCollection other) {
    if (other.isSetFieldList()) {
      List<ThadoopSample> __this__fieldList = new ArrayList<ThadoopSample>();
      for (ThadoopSample other_element : other.fieldList) {
        __this__fieldList.add(new ThadoopSample(other_element));
      }
      this.fieldList = __this__fieldList;
    }
    if (other.isSetFieldSet()) {
      Set<ThadoopType> __this__fieldSet = new HashSet<ThadoopType>();
      for (ThadoopType other_element : other.fieldSet) {
        __this__fieldSet.add(other_element);
      }
      this.fieldSet = __this__fieldSet;
    }
    if (other.isSetFieldMap()) {
      Map<String,ByteBuffer> __this__fieldMap = new HashMap<String,ByteBuffer>();
      for (Map.Entry<String, ByteBuffer> other_element : other.fieldMap.entrySet()) {

        String other_element_key = other_element.getKey();
        ByteBuffer other_element_value = other_element.getValue();

        String __this__fieldMap_copy_key = other_element_key;

        ByteBuffer __this__fieldMap_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
;

        __this__fieldMap.put(__this__fieldMap_copy_key, __this__fieldMap_copy_value);
      }
      this.fieldMap = __this__fieldMap;
    }
  }

  public ThadoopSampleCollection deepCopy() {
    return new ThadoopSampleCollection(this);
  }

  @Override
  public void clear() {
    this.fieldList = null;
    this.fieldSet = null;
    this.fieldMap = null;
  }

  public int getFieldListSize() {
    return (this.fieldList == null) ? 0 : this.fieldList.size();
  }

  public java.util.Iterator<ThadoopSample> getFieldListIterator() {
    return (this.fieldList == null) ? null : this.fieldList.iterator();
  }

  public void addToFieldList(ThadoopSample elem) {
    if (this.fieldList == null) {
      this.fieldList = new ArrayList<ThadoopSample>();
    }
    this.fieldList.add(elem);
  }

  public List<ThadoopSample> getFieldList() {
    return this.fieldList;
  }

  public void setFieldList(List<ThadoopSample> fieldList) {
    this.fieldList = fieldList;
  }

  public void unsetFieldList() {
    this.fieldList = null;
  }

  /** Returns true if field fieldList is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldList() {
    return this.fieldList != null;
  }

  public void setFieldListIsSet(boolean value) {
    if (!value) {
      this.fieldList = null;
    }
  }

  public int getFieldSetSize() {
    return (this.fieldSet == null) ? 0 : this.fieldSet.size();
  }

  public java.util.Iterator<ThadoopType> getFieldSetIterator() {
    return (this.fieldSet == null) ? null : this.fieldSet.iterator();
  }

  public void addToFieldSet(ThadoopType elem) {
    if (this.fieldSet == null) {
      this.fieldSet = new HashSet<ThadoopType>();
    }
    this.fieldSet.add(elem);
  }

  public Set<ThadoopType> getFieldSet() {
    return this.fieldSet;
  }

  public void setFieldSet(Set<ThadoopType> fieldSet) {
    this.fieldSet = fieldSet;
  }

  public void unsetFieldSet() {
    this.fieldSet = null;
  }

  /** Returns true if field fieldSet is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldSet() {
    return this.fieldSet != null;
  }

  public void setFieldSetIsSet(boolean value) {
    if (!value) {
      this.fieldSet = null;
    }
  }

  public int getFieldMapSize() {
    return (this.fieldMap == null) ? 0 : this.fieldMap.size();
  }

  public void putToFieldMap(String key, ByteBuffer val) {
    if (this.fieldMap == null) {
      this.fieldMap = new HashMap<String,ByteBuffer>();
    }
    this.fieldMap.put(key, val);
  }

  public Map<String,ByteBuffer> getFieldMap() {
    return this.fieldMap;
  }

  public void setFieldMap(Map<String,ByteBuffer> fieldMap) {
    this.fieldMap = fieldMap;
  }

  public void unsetFieldMap() {
    this.fieldMap = null;
  }

  /** Returns true if field fieldMap is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldMap() {
    return this.fieldMap != null;
  }

  public void setFieldMapIsSet(boolean value) {
    if (!value) {
      this.fieldMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD_LIST:
      if (value == null) {
        unsetFieldList();
      } else {
        setFieldList((List<ThadoopSample>)value);
      }
      break;

    case FIELD_SET:
      if (value == null) {
        unsetFieldSet();
      } else {
        setFieldSet((Set<ThadoopType>)value);
      }
      break;

    case FIELD_MAP:
      if (value == null) {
        unsetFieldMap();
      } else {
        setFieldMap((Map<String,ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_LIST:
      return getFieldList();

    case FIELD_SET:
      return getFieldSet();

    case FIELD_MAP:
      return getFieldMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD_LIST:
      return isSetFieldList();
    case FIELD_SET:
      return isSetFieldSet();
    case FIELD_MAP:
      return isSetFieldMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThadoopSampleCollection)
      return this.equals((ThadoopSampleCollection)that);
    return false;
  }

  public boolean equals(ThadoopSampleCollection that) {
    if (that == null)
      return false;

    boolean this_present_fieldList = true && this.isSetFieldList();
    boolean that_present_fieldList = true && that.isSetFieldList();
    if (this_present_fieldList || that_present_fieldList) {
      if (!(this_present_fieldList && that_present_fieldList))
        return false;
      if (!this.fieldList.equals(that.fieldList))
        return false;
    }

    boolean this_present_fieldSet = true && this.isSetFieldSet();
    boolean that_present_fieldSet = true && that.isSetFieldSet();
    if (this_present_fieldSet || that_present_fieldSet) {
      if (!(this_present_fieldSet && that_present_fieldSet))
        return false;
      if (!this.fieldSet.equals(that.fieldSet))
        return false;
    }

    boolean this_present_fieldMap = true && this.isSetFieldMap();
    boolean that_present_fieldMap = true && that.isSetFieldMap();
    if (this_present_fieldMap || that_present_fieldMap) {
      if (!(this_present_fieldMap && that_present_fieldMap))
        return false;
      if (!this.fieldMap.equals(that.fieldMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_fieldList = true && (isSetFieldList());
    builder.append(present_fieldList);
    if (present_fieldList)
      builder.append(fieldList);

    boolean present_fieldSet = true && (isSetFieldSet());
    builder.append(present_fieldSet);
    if (present_fieldSet)
      builder.append(fieldSet);

    boolean present_fieldMap = true && (isSetFieldMap());
    builder.append(present_fieldMap);
    if (present_fieldMap)
      builder.append(fieldMap);

    return builder.toHashCode();
  }

  public int compareTo(ThadoopSampleCollection other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThadoopSampleCollection typedOther = (ThadoopSampleCollection)other;

    lastComparison = Boolean.valueOf(isSetFieldList()).compareTo(typedOther.isSetFieldList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldList, typedOther.fieldList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldSet()).compareTo(typedOther.isSetFieldSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldSet, typedOther.fieldSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldMap()).compareTo(typedOther.isSetFieldMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldMap, typedOther.fieldMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThadoopSampleCollection(");
    boolean first = true;

    if (isSetFieldList()) {
      sb.append("fieldList:");
      if (this.fieldList == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldList);
      }
      first = false;
    }
    if (isSetFieldSet()) {
      if (!first) sb.append(", ");
      sb.append("fieldSet:");
      if (this.fieldSet == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldSet);
      }
      first = false;
    }
    if (isSetFieldMap()) {
      if (!first) sb.append(", ");
      sb.append("fieldMap:");
      if (this.fieldMap == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThadoopSampleCollectionStandardSchemeFactory implements SchemeFactory {
    public ThadoopSampleCollectionStandardScheme getScheme() {
      return new ThadoopSampleCollectionStandardScheme();
    }
  }

  private static class ThadoopSampleCollectionStandardScheme extends StandardScheme<ThadoopSampleCollection> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThadoopSampleCollection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.fieldList = new ArrayList<ThadoopSample>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ThadoopSample _elem2; // required
                  _elem2 = new ThadoopSample();
                  _elem2.read(iprot);
                  struct.fieldList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setFieldListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.fieldSet = new HashSet<ThadoopType>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  ThadoopType _elem5; // required
                  _elem5 = ThadoopType.findByValue(iprot.readI32());
                  struct.fieldSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setFieldSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.fieldMap = new HashMap<String,ByteBuffer>(2*_map6.size);
                for (int _i7 = 0; _i7 < _map6.size; ++_i7)
                {
                  String _key8; // required
                  ByteBuffer _val9; // required
                  _key8 = iprot.readString();
                  _val9 = iprot.readBinary();
                  struct.fieldMap.put(_key8, _val9);
                }
                iprot.readMapEnd();
              }
              struct.setFieldMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThadoopSampleCollection struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fieldList != null) {
        if (struct.isSetFieldList()) {
          oprot.writeFieldBegin(FIELD_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fieldList.size()));
            for (ThadoopSample _iter10 : struct.fieldList)
            {
              _iter10.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldSet != null) {
        if (struct.isSetFieldSet()) {
          oprot.writeFieldBegin(FIELD_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.fieldSet.size()));
            for (ThadoopType _iter11 : struct.fieldSet)
            {
              oprot.writeI32(_iter11.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldMap != null) {
        if (struct.isSetFieldMap()) {
          oprot.writeFieldBegin(FIELD_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.fieldMap.size()));
            for (Map.Entry<String, ByteBuffer> _iter12 : struct.fieldMap.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeBinary(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThadoopSampleCollectionTupleSchemeFactory implements SchemeFactory {
    public ThadoopSampleCollectionTupleScheme getScheme() {
      return new ThadoopSampleCollectionTupleScheme();
    }
  }

  private static class ThadoopSampleCollectionTupleScheme extends TupleScheme<ThadoopSampleCollection> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThadoopSampleCollection struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFieldList()) {
        optionals.set(0);
      }
      if (struct.isSetFieldSet()) {
        optionals.set(1);
      }
      if (struct.isSetFieldMap()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFieldList()) {
        {
          oprot.writeI32(struct.fieldList.size());
          for (ThadoopSample _iter13 : struct.fieldList)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetFieldSet()) {
        {
          oprot.writeI32(struct.fieldSet.size());
          for (ThadoopType _iter14 : struct.fieldSet)
          {
            oprot.writeI32(_iter14.getValue());
          }
        }
      }
      if (struct.isSetFieldMap()) {
        {
          oprot.writeI32(struct.fieldMap.size());
          for (Map.Entry<String, ByteBuffer> _iter15 : struct.fieldMap.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeBinary(_iter15.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThadoopSampleCollection struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fieldList = new ArrayList<ThadoopSample>(_list16.size);
          for (int _i17 = 0; _i17 < _list16.size; ++_i17)
          {
            ThadoopSample _elem18; // required
            _elem18 = new ThadoopSample();
            _elem18.read(iprot);
            struct.fieldList.add(_elem18);
          }
        }
        struct.setFieldListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set19 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.fieldSet = new HashSet<ThadoopType>(2*_set19.size);
          for (int _i20 = 0; _i20 < _set19.size; ++_i20)
          {
            ThadoopType _elem21; // required
            _elem21 = ThadoopType.findByValue(iprot.readI32());
            struct.fieldSet.add(_elem21);
          }
        }
        struct.setFieldSetIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fieldMap = new HashMap<String,ByteBuffer>(2*_map22.size);
          for (int _i23 = 0; _i23 < _map22.size; ++_i23)
          {
            String _key24; // required
            ByteBuffer _val25; // required
            _key24 = iprot.readString();
            _val25 = iprot.readBinary();
            struct.fieldMap.put(_key24, _val25);
          }
        }
        struct.setFieldMapIsSet(true);
      }
    }
  }

}

