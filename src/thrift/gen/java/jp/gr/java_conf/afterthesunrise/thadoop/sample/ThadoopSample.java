/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jp.gr.java_conf.afterthesunrise.thadoop.sample;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThadoopSample implements org.apache.thrift.TBase<ThadoopSample, ThadoopSample._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThadoopSample");

  private static final org.apache.thrift.protocol.TField V_BOOLEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("vBoolean", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField V_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("vByte", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField V_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("vShort", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField V_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("vInt", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField V_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("vLong", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField V_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("vDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField V_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("vString", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField V_BINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("vBinary", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField V_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("vList", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField V_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("vSet", org.apache.thrift.protocol.TType.SET, (short)22);
  private static final org.apache.thrift.protocol.TField V_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("vMap", org.apache.thrift.protocol.TType.MAP, (short)23);
  private static final org.apache.thrift.protocol.TField V_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("vStruct", org.apache.thrift.protocol.TType.STRUCT, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThadoopSampleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThadoopSampleTupleSchemeFactory());
  }

  private boolean vBoolean; // optional
  private byte vByte; // optional
  private short vShort; // optional
  private int vInt; // optional
  private long vLong; // optional
  private double vDouble; // optional
  private String vString; // optional
  private ByteBuffer vBinary; // optional
  private List<Integer> vList; // optional
  private Set<Integer> vSet; // optional
  private Map<Integer,Long> vMap; // optional
  private ThadoopStruct vStruct; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    V_BOOLEAN((short)1, "vBoolean"),
    V_BYTE((short)2, "vByte"),
    V_SHORT((short)3, "vShort"),
    V_INT((short)4, "vInt"),
    V_LONG((short)5, "vLong"),
    V_DOUBLE((short)6, "vDouble"),
    V_STRING((short)7, "vString"),
    V_BINARY((short)8, "vBinary"),
    V_LIST((short)21, "vList"),
    V_SET((short)22, "vSet"),
    V_MAP((short)23, "vMap"),
    V_STRUCT((short)31, "vStruct");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // V_BOOLEAN
          return V_BOOLEAN;
        case 2: // V_BYTE
          return V_BYTE;
        case 3: // V_SHORT
          return V_SHORT;
        case 4: // V_INT
          return V_INT;
        case 5: // V_LONG
          return V_LONG;
        case 6: // V_DOUBLE
          return V_DOUBLE;
        case 7: // V_STRING
          return V_STRING;
        case 8: // V_BINARY
          return V_BINARY;
        case 21: // V_LIST
          return V_LIST;
        case 22: // V_SET
          return V_SET;
        case 23: // V_MAP
          return V_MAP;
        case 31: // V_STRUCT
          return V_STRUCT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VBOOLEAN_ISSET_ID = 0;
  private static final int __VBYTE_ISSET_ID = 1;
  private static final int __VSHORT_ISSET_ID = 2;
  private static final int __VINT_ISSET_ID = 3;
  private static final int __VLONG_ISSET_ID = 4;
  private static final int __VDOUBLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.V_BOOLEAN,_Fields.V_BYTE,_Fields.V_SHORT,_Fields.V_INT,_Fields.V_LONG,_Fields.V_DOUBLE,_Fields.V_STRING,_Fields.V_BINARY,_Fields.V_LIST,_Fields.V_SET,_Fields.V_MAP,_Fields.V_STRUCT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.V_BOOLEAN, new org.apache.thrift.meta_data.FieldMetaData("vBoolean", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.V_BYTE, new org.apache.thrift.meta_data.FieldMetaData("vByte", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.V_SHORT, new org.apache.thrift.meta_data.FieldMetaData("vShort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.V_INT, new org.apache.thrift.meta_data.FieldMetaData("vInt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.V_LONG, new org.apache.thrift.meta_data.FieldMetaData("vLong", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.V_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("vDouble", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.V_STRING, new org.apache.thrift.meta_data.FieldMetaData("vString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.V_BINARY, new org.apache.thrift.meta_data.FieldMetaData("vBinary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.V_LIST, new org.apache.thrift.meta_data.FieldMetaData("vList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.V_SET, new org.apache.thrift.meta_data.FieldMetaData("vSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.V_MAP, new org.apache.thrift.meta_data.FieldMetaData("vMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.V_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("vStruct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThadoopStruct.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThadoopSample.class, metaDataMap);
  }

  public ThadoopSample() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThadoopSample(ThadoopSample other) {
    __isset_bitfield = other.__isset_bitfield;
    this.vBoolean = other.vBoolean;
    this.vByte = other.vByte;
    this.vShort = other.vShort;
    this.vInt = other.vInt;
    this.vLong = other.vLong;
    this.vDouble = other.vDouble;
    if (other.isSetVString()) {
      this.vString = other.vString;
    }
    if (other.isSetVBinary()) {
      this.vBinary = org.apache.thrift.TBaseHelper.copyBinary(other.vBinary);
;
    }
    if (other.isSetVList()) {
      List<Integer> __this__vList = new ArrayList<Integer>();
      for (Integer other_element : other.vList) {
        __this__vList.add(other_element);
      }
      this.vList = __this__vList;
    }
    if (other.isSetVSet()) {
      Set<Integer> __this__vSet = new HashSet<Integer>();
      for (Integer other_element : other.vSet) {
        __this__vSet.add(other_element);
      }
      this.vSet = __this__vSet;
    }
    if (other.isSetVMap()) {
      Map<Integer,Long> __this__vMap = new HashMap<Integer,Long>();
      for (Map.Entry<Integer, Long> other_element : other.vMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        Integer __this__vMap_copy_key = other_element_key;

        Long __this__vMap_copy_value = other_element_value;

        __this__vMap.put(__this__vMap_copy_key, __this__vMap_copy_value);
      }
      this.vMap = __this__vMap;
    }
    if (other.isSetVStruct()) {
      this.vStruct = new ThadoopStruct(other.vStruct);
    }
  }

  public ThadoopSample deepCopy() {
    return new ThadoopSample(this);
  }

  @Override
  public void clear() {
    setVBooleanIsSet(false);
    this.vBoolean = false;
    setVByteIsSet(false);
    this.vByte = 0;
    setVShortIsSet(false);
    this.vShort = 0;
    setVIntIsSet(false);
    this.vInt = 0;
    setVLongIsSet(false);
    this.vLong = 0;
    setVDoubleIsSet(false);
    this.vDouble = 0.0;
    this.vString = null;
    this.vBinary = null;
    this.vList = null;
    this.vSet = null;
    this.vMap = null;
    this.vStruct = null;
  }

  public boolean isVBoolean() {
    return this.vBoolean;
  }

  public void setVBoolean(boolean vBoolean) {
    this.vBoolean = vBoolean;
    setVBooleanIsSet(true);
  }

  public void unsetVBoolean() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VBOOLEAN_ISSET_ID);
  }

  /** Returns true if field vBoolean is set (has been assigned a value) and false otherwise */
  public boolean isSetVBoolean() {
    return EncodingUtils.testBit(__isset_bitfield, __VBOOLEAN_ISSET_ID);
  }

  public void setVBooleanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VBOOLEAN_ISSET_ID, value);
  }

  public byte getVByte() {
    return this.vByte;
  }

  public void setVByte(byte vByte) {
    this.vByte = vByte;
    setVByteIsSet(true);
  }

  public void unsetVByte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VBYTE_ISSET_ID);
  }

  /** Returns true if field vByte is set (has been assigned a value) and false otherwise */
  public boolean isSetVByte() {
    return EncodingUtils.testBit(__isset_bitfield, __VBYTE_ISSET_ID);
  }

  public void setVByteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VBYTE_ISSET_ID, value);
  }

  public short getVShort() {
    return this.vShort;
  }

  public void setVShort(short vShort) {
    this.vShort = vShort;
    setVShortIsSet(true);
  }

  public void unsetVShort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VSHORT_ISSET_ID);
  }

  /** Returns true if field vShort is set (has been assigned a value) and false otherwise */
  public boolean isSetVShort() {
    return EncodingUtils.testBit(__isset_bitfield, __VSHORT_ISSET_ID);
  }

  public void setVShortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VSHORT_ISSET_ID, value);
  }

  public int getVInt() {
    return this.vInt;
  }

  public void setVInt(int vInt) {
    this.vInt = vInt;
    setVIntIsSet(true);
  }

  public void unsetVInt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VINT_ISSET_ID);
  }

  /** Returns true if field vInt is set (has been assigned a value) and false otherwise */
  public boolean isSetVInt() {
    return EncodingUtils.testBit(__isset_bitfield, __VINT_ISSET_ID);
  }

  public void setVIntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VINT_ISSET_ID, value);
  }

  public long getVLong() {
    return this.vLong;
  }

  public void setVLong(long vLong) {
    this.vLong = vLong;
    setVLongIsSet(true);
  }

  public void unsetVLong() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VLONG_ISSET_ID);
  }

  /** Returns true if field vLong is set (has been assigned a value) and false otherwise */
  public boolean isSetVLong() {
    return EncodingUtils.testBit(__isset_bitfield, __VLONG_ISSET_ID);
  }

  public void setVLongIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VLONG_ISSET_ID, value);
  }

  public double getVDouble() {
    return this.vDouble;
  }

  public void setVDouble(double vDouble) {
    this.vDouble = vDouble;
    setVDoubleIsSet(true);
  }

  public void unsetVDouble() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VDOUBLE_ISSET_ID);
  }

  /** Returns true if field vDouble is set (has been assigned a value) and false otherwise */
  public boolean isSetVDouble() {
    return EncodingUtils.testBit(__isset_bitfield, __VDOUBLE_ISSET_ID);
  }

  public void setVDoubleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VDOUBLE_ISSET_ID, value);
  }

  public String getVString() {
    return this.vString;
  }

  public void setVString(String vString) {
    this.vString = vString;
  }

  public void unsetVString() {
    this.vString = null;
  }

  /** Returns true if field vString is set (has been assigned a value) and false otherwise */
  public boolean isSetVString() {
    return this.vString != null;
  }

  public void setVStringIsSet(boolean value) {
    if (!value) {
      this.vString = null;
    }
  }

  public byte[] getVBinary() {
    setVBinary(org.apache.thrift.TBaseHelper.rightSize(vBinary));
    return vBinary == null ? null : vBinary.array();
  }

  public ByteBuffer bufferForVBinary() {
    return vBinary;
  }

  public void setVBinary(byte[] vBinary) {
    setVBinary(vBinary == null ? (ByteBuffer)null : ByteBuffer.wrap(vBinary));
  }

  public void setVBinary(ByteBuffer vBinary) {
    this.vBinary = vBinary;
  }

  public void unsetVBinary() {
    this.vBinary = null;
  }

  /** Returns true if field vBinary is set (has been assigned a value) and false otherwise */
  public boolean isSetVBinary() {
    return this.vBinary != null;
  }

  public void setVBinaryIsSet(boolean value) {
    if (!value) {
      this.vBinary = null;
    }
  }

  public int getVListSize() {
    return (this.vList == null) ? 0 : this.vList.size();
  }

  public java.util.Iterator<Integer> getVListIterator() {
    return (this.vList == null) ? null : this.vList.iterator();
  }

  public void addToVList(int elem) {
    if (this.vList == null) {
      this.vList = new ArrayList<Integer>();
    }
    this.vList.add(elem);
  }

  public List<Integer> getVList() {
    return this.vList;
  }

  public void setVList(List<Integer> vList) {
    this.vList = vList;
  }

  public void unsetVList() {
    this.vList = null;
  }

  /** Returns true if field vList is set (has been assigned a value) and false otherwise */
  public boolean isSetVList() {
    return this.vList != null;
  }

  public void setVListIsSet(boolean value) {
    if (!value) {
      this.vList = null;
    }
  }

  public int getVSetSize() {
    return (this.vSet == null) ? 0 : this.vSet.size();
  }

  public java.util.Iterator<Integer> getVSetIterator() {
    return (this.vSet == null) ? null : this.vSet.iterator();
  }

  public void addToVSet(int elem) {
    if (this.vSet == null) {
      this.vSet = new HashSet<Integer>();
    }
    this.vSet.add(elem);
  }

  public Set<Integer> getVSet() {
    return this.vSet;
  }

  public void setVSet(Set<Integer> vSet) {
    this.vSet = vSet;
  }

  public void unsetVSet() {
    this.vSet = null;
  }

  /** Returns true if field vSet is set (has been assigned a value) and false otherwise */
  public boolean isSetVSet() {
    return this.vSet != null;
  }

  public void setVSetIsSet(boolean value) {
    if (!value) {
      this.vSet = null;
    }
  }

  public int getVMapSize() {
    return (this.vMap == null) ? 0 : this.vMap.size();
  }

  public void putToVMap(int key, long val) {
    if (this.vMap == null) {
      this.vMap = new HashMap<Integer,Long>();
    }
    this.vMap.put(key, val);
  }

  public Map<Integer,Long> getVMap() {
    return this.vMap;
  }

  public void setVMap(Map<Integer,Long> vMap) {
    this.vMap = vMap;
  }

  public void unsetVMap() {
    this.vMap = null;
  }

  /** Returns true if field vMap is set (has been assigned a value) and false otherwise */
  public boolean isSetVMap() {
    return this.vMap != null;
  }

  public void setVMapIsSet(boolean value) {
    if (!value) {
      this.vMap = null;
    }
  }

  public ThadoopStruct getVStruct() {
    return this.vStruct;
  }

  public void setVStruct(ThadoopStruct vStruct) {
    this.vStruct = vStruct;
  }

  public void unsetVStruct() {
    this.vStruct = null;
  }

  /** Returns true if field vStruct is set (has been assigned a value) and false otherwise */
  public boolean isSetVStruct() {
    return this.vStruct != null;
  }

  public void setVStructIsSet(boolean value) {
    if (!value) {
      this.vStruct = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case V_BOOLEAN:
      if (value == null) {
        unsetVBoolean();
      } else {
        setVBoolean((Boolean)value);
      }
      break;

    case V_BYTE:
      if (value == null) {
        unsetVByte();
      } else {
        setVByte((Byte)value);
      }
      break;

    case V_SHORT:
      if (value == null) {
        unsetVShort();
      } else {
        setVShort((Short)value);
      }
      break;

    case V_INT:
      if (value == null) {
        unsetVInt();
      } else {
        setVInt((Integer)value);
      }
      break;

    case V_LONG:
      if (value == null) {
        unsetVLong();
      } else {
        setVLong((Long)value);
      }
      break;

    case V_DOUBLE:
      if (value == null) {
        unsetVDouble();
      } else {
        setVDouble((Double)value);
      }
      break;

    case V_STRING:
      if (value == null) {
        unsetVString();
      } else {
        setVString((String)value);
      }
      break;

    case V_BINARY:
      if (value == null) {
        unsetVBinary();
      } else {
        setVBinary((ByteBuffer)value);
      }
      break;

    case V_LIST:
      if (value == null) {
        unsetVList();
      } else {
        setVList((List<Integer>)value);
      }
      break;

    case V_SET:
      if (value == null) {
        unsetVSet();
      } else {
        setVSet((Set<Integer>)value);
      }
      break;

    case V_MAP:
      if (value == null) {
        unsetVMap();
      } else {
        setVMap((Map<Integer,Long>)value);
      }
      break;

    case V_STRUCT:
      if (value == null) {
        unsetVStruct();
      } else {
        setVStruct((ThadoopStruct)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case V_BOOLEAN:
      return Boolean.valueOf(isVBoolean());

    case V_BYTE:
      return Byte.valueOf(getVByte());

    case V_SHORT:
      return Short.valueOf(getVShort());

    case V_INT:
      return Integer.valueOf(getVInt());

    case V_LONG:
      return Long.valueOf(getVLong());

    case V_DOUBLE:
      return Double.valueOf(getVDouble());

    case V_STRING:
      return getVString();

    case V_BINARY:
      return getVBinary();

    case V_LIST:
      return getVList();

    case V_SET:
      return getVSet();

    case V_MAP:
      return getVMap();

    case V_STRUCT:
      return getVStruct();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case V_BOOLEAN:
      return isSetVBoolean();
    case V_BYTE:
      return isSetVByte();
    case V_SHORT:
      return isSetVShort();
    case V_INT:
      return isSetVInt();
    case V_LONG:
      return isSetVLong();
    case V_DOUBLE:
      return isSetVDouble();
    case V_STRING:
      return isSetVString();
    case V_BINARY:
      return isSetVBinary();
    case V_LIST:
      return isSetVList();
    case V_SET:
      return isSetVSet();
    case V_MAP:
      return isSetVMap();
    case V_STRUCT:
      return isSetVStruct();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThadoopSample)
      return this.equals((ThadoopSample)that);
    return false;
  }

  public boolean equals(ThadoopSample that) {
    if (that == null)
      return false;

    boolean this_present_vBoolean = true && this.isSetVBoolean();
    boolean that_present_vBoolean = true && that.isSetVBoolean();
    if (this_present_vBoolean || that_present_vBoolean) {
      if (!(this_present_vBoolean && that_present_vBoolean))
        return false;
      if (this.vBoolean != that.vBoolean)
        return false;
    }

    boolean this_present_vByte = true && this.isSetVByte();
    boolean that_present_vByte = true && that.isSetVByte();
    if (this_present_vByte || that_present_vByte) {
      if (!(this_present_vByte && that_present_vByte))
        return false;
      if (this.vByte != that.vByte)
        return false;
    }

    boolean this_present_vShort = true && this.isSetVShort();
    boolean that_present_vShort = true && that.isSetVShort();
    if (this_present_vShort || that_present_vShort) {
      if (!(this_present_vShort && that_present_vShort))
        return false;
      if (this.vShort != that.vShort)
        return false;
    }

    boolean this_present_vInt = true && this.isSetVInt();
    boolean that_present_vInt = true && that.isSetVInt();
    if (this_present_vInt || that_present_vInt) {
      if (!(this_present_vInt && that_present_vInt))
        return false;
      if (this.vInt != that.vInt)
        return false;
    }

    boolean this_present_vLong = true && this.isSetVLong();
    boolean that_present_vLong = true && that.isSetVLong();
    if (this_present_vLong || that_present_vLong) {
      if (!(this_present_vLong && that_present_vLong))
        return false;
      if (this.vLong != that.vLong)
        return false;
    }

    boolean this_present_vDouble = true && this.isSetVDouble();
    boolean that_present_vDouble = true && that.isSetVDouble();
    if (this_present_vDouble || that_present_vDouble) {
      if (!(this_present_vDouble && that_present_vDouble))
        return false;
      if (this.vDouble != that.vDouble)
        return false;
    }

    boolean this_present_vString = true && this.isSetVString();
    boolean that_present_vString = true && that.isSetVString();
    if (this_present_vString || that_present_vString) {
      if (!(this_present_vString && that_present_vString))
        return false;
      if (!this.vString.equals(that.vString))
        return false;
    }

    boolean this_present_vBinary = true && this.isSetVBinary();
    boolean that_present_vBinary = true && that.isSetVBinary();
    if (this_present_vBinary || that_present_vBinary) {
      if (!(this_present_vBinary && that_present_vBinary))
        return false;
      if (!this.vBinary.equals(that.vBinary))
        return false;
    }

    boolean this_present_vList = true && this.isSetVList();
    boolean that_present_vList = true && that.isSetVList();
    if (this_present_vList || that_present_vList) {
      if (!(this_present_vList && that_present_vList))
        return false;
      if (!this.vList.equals(that.vList))
        return false;
    }

    boolean this_present_vSet = true && this.isSetVSet();
    boolean that_present_vSet = true && that.isSetVSet();
    if (this_present_vSet || that_present_vSet) {
      if (!(this_present_vSet && that_present_vSet))
        return false;
      if (!this.vSet.equals(that.vSet))
        return false;
    }

    boolean this_present_vMap = true && this.isSetVMap();
    boolean that_present_vMap = true && that.isSetVMap();
    if (this_present_vMap || that_present_vMap) {
      if (!(this_present_vMap && that_present_vMap))
        return false;
      if (!this.vMap.equals(that.vMap))
        return false;
    }

    boolean this_present_vStruct = true && this.isSetVStruct();
    boolean that_present_vStruct = true && that.isSetVStruct();
    if (this_present_vStruct || that_present_vStruct) {
      if (!(this_present_vStruct && that_present_vStruct))
        return false;
      if (!this.vStruct.equals(that.vStruct))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_vBoolean = true && (isSetVBoolean());
    builder.append(present_vBoolean);
    if (present_vBoolean)
      builder.append(vBoolean);

    boolean present_vByte = true && (isSetVByte());
    builder.append(present_vByte);
    if (present_vByte)
      builder.append(vByte);

    boolean present_vShort = true && (isSetVShort());
    builder.append(present_vShort);
    if (present_vShort)
      builder.append(vShort);

    boolean present_vInt = true && (isSetVInt());
    builder.append(present_vInt);
    if (present_vInt)
      builder.append(vInt);

    boolean present_vLong = true && (isSetVLong());
    builder.append(present_vLong);
    if (present_vLong)
      builder.append(vLong);

    boolean present_vDouble = true && (isSetVDouble());
    builder.append(present_vDouble);
    if (present_vDouble)
      builder.append(vDouble);

    boolean present_vString = true && (isSetVString());
    builder.append(present_vString);
    if (present_vString)
      builder.append(vString);

    boolean present_vBinary = true && (isSetVBinary());
    builder.append(present_vBinary);
    if (present_vBinary)
      builder.append(vBinary);

    boolean present_vList = true && (isSetVList());
    builder.append(present_vList);
    if (present_vList)
      builder.append(vList);

    boolean present_vSet = true && (isSetVSet());
    builder.append(present_vSet);
    if (present_vSet)
      builder.append(vSet);

    boolean present_vMap = true && (isSetVMap());
    builder.append(present_vMap);
    if (present_vMap)
      builder.append(vMap);

    boolean present_vStruct = true && (isSetVStruct());
    builder.append(present_vStruct);
    if (present_vStruct)
      builder.append(vStruct);

    return builder.toHashCode();
  }

  public int compareTo(ThadoopSample other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThadoopSample typedOther = (ThadoopSample)other;

    lastComparison = Boolean.valueOf(isSetVBoolean()).compareTo(typedOther.isSetVBoolean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVBoolean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vBoolean, typedOther.vBoolean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVByte()).compareTo(typedOther.isSetVByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vByte, typedOther.vByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVShort()).compareTo(typedOther.isSetVShort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVShort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vShort, typedOther.vShort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVInt()).compareTo(typedOther.isSetVInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vInt, typedOther.vInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVLong()).compareTo(typedOther.isSetVLong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVLong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vLong, typedOther.vLong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVDouble()).compareTo(typedOther.isSetVDouble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVDouble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vDouble, typedOther.vDouble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVString()).compareTo(typedOther.isSetVString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vString, typedOther.vString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVBinary()).compareTo(typedOther.isSetVBinary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVBinary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vBinary, typedOther.vBinary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVList()).compareTo(typedOther.isSetVList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vList, typedOther.vList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVSet()).compareTo(typedOther.isSetVSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vSet, typedOther.vSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVMap()).compareTo(typedOther.isSetVMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vMap, typedOther.vMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVStruct()).compareTo(typedOther.isSetVStruct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVStruct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vStruct, typedOther.vStruct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThadoopSample(");
    boolean first = true;

    if (isSetVBoolean()) {
      sb.append("vBoolean:");
      sb.append(this.vBoolean);
      first = false;
    }
    if (isSetVByte()) {
      if (!first) sb.append(", ");
      sb.append("vByte:");
      sb.append(this.vByte);
      first = false;
    }
    if (isSetVShort()) {
      if (!first) sb.append(", ");
      sb.append("vShort:");
      sb.append(this.vShort);
      first = false;
    }
    if (isSetVInt()) {
      if (!first) sb.append(", ");
      sb.append("vInt:");
      sb.append(this.vInt);
      first = false;
    }
    if (isSetVLong()) {
      if (!first) sb.append(", ");
      sb.append("vLong:");
      sb.append(this.vLong);
      first = false;
    }
    if (isSetVDouble()) {
      if (!first) sb.append(", ");
      sb.append("vDouble:");
      sb.append(this.vDouble);
      first = false;
    }
    if (isSetVString()) {
      if (!first) sb.append(", ");
      sb.append("vString:");
      if (this.vString == null) {
        sb.append("null");
      } else {
        sb.append(this.vString);
      }
      first = false;
    }
    if (isSetVBinary()) {
      if (!first) sb.append(", ");
      sb.append("vBinary:");
      if (this.vBinary == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.vBinary, sb);
      }
      first = false;
    }
    if (isSetVList()) {
      if (!first) sb.append(", ");
      sb.append("vList:");
      if (this.vList == null) {
        sb.append("null");
      } else {
        sb.append(this.vList);
      }
      first = false;
    }
    if (isSetVSet()) {
      if (!first) sb.append(", ");
      sb.append("vSet:");
      if (this.vSet == null) {
        sb.append("null");
      } else {
        sb.append(this.vSet);
      }
      first = false;
    }
    if (isSetVMap()) {
      if (!first) sb.append(", ");
      sb.append("vMap:");
      if (this.vMap == null) {
        sb.append("null");
      } else {
        sb.append(this.vMap);
      }
      first = false;
    }
    if (isSetVStruct()) {
      if (!first) sb.append(", ");
      sb.append("vStruct:");
      if (this.vStruct == null) {
        sb.append("null");
      } else {
        sb.append(this.vStruct);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (vStruct != null) {
      vStruct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThadoopSampleStandardSchemeFactory implements SchemeFactory {
    public ThadoopSampleStandardScheme getScheme() {
      return new ThadoopSampleStandardScheme();
    }
  }

  private static class ThadoopSampleStandardScheme extends StandardScheme<ThadoopSample> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThadoopSample struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // V_BOOLEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.vBoolean = iprot.readBool();
              struct.setVBooleanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // V_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.vByte = iprot.readByte();
              struct.setVByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // V_SHORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.vShort = iprot.readI16();
              struct.setVShortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // V_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vInt = iprot.readI32();
              struct.setVIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // V_LONG
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vLong = iprot.readI64();
              struct.setVLongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // V_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vDouble = iprot.readDouble();
              struct.setVDoubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // V_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vString = iprot.readString();
              struct.setVStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // V_BINARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vBinary = iprot.readBinary();
              struct.setVBinaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // V_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.vList = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2; // optional
                  _elem2 = iprot.readI32();
                  struct.vList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setVListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // V_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.vSet = new HashSet<Integer>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  int _elem5; // optional
                  _elem5 = iprot.readI32();
                  struct.vSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setVSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // V_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.vMap = new HashMap<Integer,Long>(2*_map6.size);
                for (int _i7 = 0; _i7 < _map6.size; ++_i7)
                {
                  int _key8; // required
                  long _val9; // required
                  _key8 = iprot.readI32();
                  _val9 = iprot.readI64();
                  struct.vMap.put(_key8, _val9);
                }
                iprot.readMapEnd();
              }
              struct.setVMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // V_STRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.vStruct = new ThadoopStruct();
              struct.vStruct.read(iprot);
              struct.setVStructIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThadoopSample struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetVBoolean()) {
        oprot.writeFieldBegin(V_BOOLEAN_FIELD_DESC);
        oprot.writeBool(struct.vBoolean);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVByte()) {
        oprot.writeFieldBegin(V_BYTE_FIELD_DESC);
        oprot.writeByte(struct.vByte);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVShort()) {
        oprot.writeFieldBegin(V_SHORT_FIELD_DESC);
        oprot.writeI16(struct.vShort);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVInt()) {
        oprot.writeFieldBegin(V_INT_FIELD_DESC);
        oprot.writeI32(struct.vInt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVLong()) {
        oprot.writeFieldBegin(V_LONG_FIELD_DESC);
        oprot.writeI64(struct.vLong);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVDouble()) {
        oprot.writeFieldBegin(V_DOUBLE_FIELD_DESC);
        oprot.writeDouble(struct.vDouble);
        oprot.writeFieldEnd();
      }
      if (struct.vString != null) {
        if (struct.isSetVString()) {
          oprot.writeFieldBegin(V_STRING_FIELD_DESC);
          oprot.writeString(struct.vString);
          oprot.writeFieldEnd();
        }
      }
      if (struct.vBinary != null) {
        if (struct.isSetVBinary()) {
          oprot.writeFieldBegin(V_BINARY_FIELD_DESC);
          oprot.writeBinary(struct.vBinary);
          oprot.writeFieldEnd();
        }
      }
      if (struct.vList != null) {
        if (struct.isSetVList()) {
          oprot.writeFieldBegin(V_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.vList.size()));
            for (int _iter10 : struct.vList)
            {
              oprot.writeI32(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.vSet != null) {
        if (struct.isSetVSet()) {
          oprot.writeFieldBegin(V_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.vSet.size()));
            for (int _iter11 : struct.vSet)
            {
              oprot.writeI32(_iter11);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.vMap != null) {
        if (struct.isSetVMap()) {
          oprot.writeFieldBegin(V_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.vMap.size()));
            for (Map.Entry<Integer, Long> _iter12 : struct.vMap.entrySet())
            {
              oprot.writeI32(_iter12.getKey());
              oprot.writeI64(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.vStruct != null) {
        if (struct.isSetVStruct()) {
          oprot.writeFieldBegin(V_STRUCT_FIELD_DESC);
          struct.vStruct.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThadoopSampleTupleSchemeFactory implements SchemeFactory {
    public ThadoopSampleTupleScheme getScheme() {
      return new ThadoopSampleTupleScheme();
    }
  }

  private static class ThadoopSampleTupleScheme extends TupleScheme<ThadoopSample> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThadoopSample struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVBoolean()) {
        optionals.set(0);
      }
      if (struct.isSetVByte()) {
        optionals.set(1);
      }
      if (struct.isSetVShort()) {
        optionals.set(2);
      }
      if (struct.isSetVInt()) {
        optionals.set(3);
      }
      if (struct.isSetVLong()) {
        optionals.set(4);
      }
      if (struct.isSetVDouble()) {
        optionals.set(5);
      }
      if (struct.isSetVString()) {
        optionals.set(6);
      }
      if (struct.isSetVBinary()) {
        optionals.set(7);
      }
      if (struct.isSetVList()) {
        optionals.set(8);
      }
      if (struct.isSetVSet()) {
        optionals.set(9);
      }
      if (struct.isSetVMap()) {
        optionals.set(10);
      }
      if (struct.isSetVStruct()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetVBoolean()) {
        oprot.writeBool(struct.vBoolean);
      }
      if (struct.isSetVByte()) {
        oprot.writeByte(struct.vByte);
      }
      if (struct.isSetVShort()) {
        oprot.writeI16(struct.vShort);
      }
      if (struct.isSetVInt()) {
        oprot.writeI32(struct.vInt);
      }
      if (struct.isSetVLong()) {
        oprot.writeI64(struct.vLong);
      }
      if (struct.isSetVDouble()) {
        oprot.writeDouble(struct.vDouble);
      }
      if (struct.isSetVString()) {
        oprot.writeString(struct.vString);
      }
      if (struct.isSetVBinary()) {
        oprot.writeBinary(struct.vBinary);
      }
      if (struct.isSetVList()) {
        {
          oprot.writeI32(struct.vList.size());
          for (int _iter13 : struct.vList)
          {
            oprot.writeI32(_iter13);
          }
        }
      }
      if (struct.isSetVSet()) {
        {
          oprot.writeI32(struct.vSet.size());
          for (int _iter14 : struct.vSet)
          {
            oprot.writeI32(_iter14);
          }
        }
      }
      if (struct.isSetVMap()) {
        {
          oprot.writeI32(struct.vMap.size());
          for (Map.Entry<Integer, Long> _iter15 : struct.vMap.entrySet())
          {
            oprot.writeI32(_iter15.getKey());
            oprot.writeI64(_iter15.getValue());
          }
        }
      }
      if (struct.isSetVStruct()) {
        struct.vStruct.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThadoopSample struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.vBoolean = iprot.readBool();
        struct.setVBooleanIsSet(true);
      }
      if (incoming.get(1)) {
        struct.vByte = iprot.readByte();
        struct.setVByteIsSet(true);
      }
      if (incoming.get(2)) {
        struct.vShort = iprot.readI16();
        struct.setVShortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.vInt = iprot.readI32();
        struct.setVIntIsSet(true);
      }
      if (incoming.get(4)) {
        struct.vLong = iprot.readI64();
        struct.setVLongIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vDouble = iprot.readDouble();
        struct.setVDoubleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.vString = iprot.readString();
        struct.setVStringIsSet(true);
      }
      if (incoming.get(7)) {
        struct.vBinary = iprot.readBinary();
        struct.setVBinaryIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.vList = new ArrayList<Integer>(_list16.size);
          for (int _i17 = 0; _i17 < _list16.size; ++_i17)
          {
            int _elem18; // optional
            _elem18 = iprot.readI32();
            struct.vList.add(_elem18);
          }
        }
        struct.setVListIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set19 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.vSet = new HashSet<Integer>(2*_set19.size);
          for (int _i20 = 0; _i20 < _set19.size; ++_i20)
          {
            int _elem21; // optional
            _elem21 = iprot.readI32();
            struct.vSet.add(_elem21);
          }
        }
        struct.setVSetIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.vMap = new HashMap<Integer,Long>(2*_map22.size);
          for (int _i23 = 0; _i23 < _map22.size; ++_i23)
          {
            int _key24; // required
            long _val25; // required
            _key24 = iprot.readI32();
            _val25 = iprot.readI64();
            struct.vMap.put(_key24, _val25);
          }
        }
        struct.setVMapIsSet(true);
      }
      if (incoming.get(11)) {
        struct.vStruct = new ThadoopStruct();
        struct.vStruct.read(iprot);
        struct.setVStructIsSet(true);
      }
    }
  }

}

