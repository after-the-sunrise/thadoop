/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jp.gr.java_conf.afterthesunrise.thadoop.sample;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThadoopSample implements org.apache.thrift.TBase<ThadoopSample, ThadoopSample._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThadoopSample");

  private static final org.apache.thrift.protocol.TField FIELD_BOOLEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldBoolean", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldByte", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldShort", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField FIELD_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldInt", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FIELD_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldLong", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField FIELD_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField FIELD_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldString", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThadoopSampleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThadoopSampleTupleSchemeFactory());
  }

  private boolean fieldBoolean; // optional
  private byte fieldByte; // optional
  private short fieldShort; // optional
  private int fieldInt; // optional
  private long fieldLong; // optional
  private double fieldDouble; // optional
  private String fieldString; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD_BOOLEAN((short)1, "fieldBoolean"),
    FIELD_BYTE((short)2, "fieldByte"),
    FIELD_SHORT((short)3, "fieldShort"),
    FIELD_INT((short)4, "fieldInt"),
    FIELD_LONG((short)5, "fieldLong"),
    FIELD_DOUBLE((short)6, "fieldDouble"),
    FIELD_STRING((short)7, "fieldString");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_BOOLEAN
          return FIELD_BOOLEAN;
        case 2: // FIELD_BYTE
          return FIELD_BYTE;
        case 3: // FIELD_SHORT
          return FIELD_SHORT;
        case 4: // FIELD_INT
          return FIELD_INT;
        case 5: // FIELD_LONG
          return FIELD_LONG;
        case 6: // FIELD_DOUBLE
          return FIELD_DOUBLE;
        case 7: // FIELD_STRING
          return FIELD_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIELDBOOLEAN_ISSET_ID = 0;
  private static final int __FIELDBYTE_ISSET_ID = 1;
  private static final int __FIELDSHORT_ISSET_ID = 2;
  private static final int __FIELDINT_ISSET_ID = 3;
  private static final int __FIELDLONG_ISSET_ID = 4;
  private static final int __FIELDDOUBLE_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  private _Fields optionals[] = {_Fields.FIELD_BOOLEAN,_Fields.FIELD_BYTE,_Fields.FIELD_SHORT,_Fields.FIELD_INT,_Fields.FIELD_LONG,_Fields.FIELD_DOUBLE,_Fields.FIELD_STRING};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_BOOLEAN, new org.apache.thrift.meta_data.FieldMetaData("fieldBoolean", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD_BYTE, new org.apache.thrift.meta_data.FieldMetaData("fieldByte", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FIELD_SHORT, new org.apache.thrift.meta_data.FieldMetaData("fieldShort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.FIELD_INT, new org.apache.thrift.meta_data.FieldMetaData("fieldInt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD_LONG, new org.apache.thrift.meta_data.FieldMetaData("fieldLong", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIELD_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("fieldDouble", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FIELD_STRING, new org.apache.thrift.meta_data.FieldMetaData("fieldString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThadoopSample.class, metaDataMap);
  }

  public ThadoopSample() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThadoopSample(ThadoopSample other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.fieldBoolean = other.fieldBoolean;
    this.fieldByte = other.fieldByte;
    this.fieldShort = other.fieldShort;
    this.fieldInt = other.fieldInt;
    this.fieldLong = other.fieldLong;
    this.fieldDouble = other.fieldDouble;
    if (other.isSetFieldString()) {
      this.fieldString = other.fieldString;
    }
  }

  public ThadoopSample deepCopy() {
    return new ThadoopSample(this);
  }

  @Override
  public void clear() {
    setFieldBooleanIsSet(false);
    this.fieldBoolean = false;
    setFieldByteIsSet(false);
    this.fieldByte = 0;
    setFieldShortIsSet(false);
    this.fieldShort = 0;
    setFieldIntIsSet(false);
    this.fieldInt = 0;
    setFieldLongIsSet(false);
    this.fieldLong = 0;
    setFieldDoubleIsSet(false);
    this.fieldDouble = 0.0;
    this.fieldString = null;
  }

  public boolean isFieldBoolean() {
    return this.fieldBoolean;
  }

  public void setFieldBoolean(boolean fieldBoolean) {
    this.fieldBoolean = fieldBoolean;
    setFieldBooleanIsSet(true);
  }

  public void unsetFieldBoolean() {
    __isset_bit_vector.clear(__FIELDBOOLEAN_ISSET_ID);
  }

  /** Returns true if field fieldBoolean is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldBoolean() {
    return __isset_bit_vector.get(__FIELDBOOLEAN_ISSET_ID);
  }

  public void setFieldBooleanIsSet(boolean value) {
    __isset_bit_vector.set(__FIELDBOOLEAN_ISSET_ID, value);
  }

  public byte getFieldByte() {
    return this.fieldByte;
  }

  public void setFieldByte(byte fieldByte) {
    this.fieldByte = fieldByte;
    setFieldByteIsSet(true);
  }

  public void unsetFieldByte() {
    __isset_bit_vector.clear(__FIELDBYTE_ISSET_ID);
  }

  /** Returns true if field fieldByte is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldByte() {
    return __isset_bit_vector.get(__FIELDBYTE_ISSET_ID);
  }

  public void setFieldByteIsSet(boolean value) {
    __isset_bit_vector.set(__FIELDBYTE_ISSET_ID, value);
  }

  public short getFieldShort() {
    return this.fieldShort;
  }

  public void setFieldShort(short fieldShort) {
    this.fieldShort = fieldShort;
    setFieldShortIsSet(true);
  }

  public void unsetFieldShort() {
    __isset_bit_vector.clear(__FIELDSHORT_ISSET_ID);
  }

  /** Returns true if field fieldShort is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldShort() {
    return __isset_bit_vector.get(__FIELDSHORT_ISSET_ID);
  }

  public void setFieldShortIsSet(boolean value) {
    __isset_bit_vector.set(__FIELDSHORT_ISSET_ID, value);
  }

  public int getFieldInt() {
    return this.fieldInt;
  }

  public void setFieldInt(int fieldInt) {
    this.fieldInt = fieldInt;
    setFieldIntIsSet(true);
  }

  public void unsetFieldInt() {
    __isset_bit_vector.clear(__FIELDINT_ISSET_ID);
  }

  /** Returns true if field fieldInt is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldInt() {
    return __isset_bit_vector.get(__FIELDINT_ISSET_ID);
  }

  public void setFieldIntIsSet(boolean value) {
    __isset_bit_vector.set(__FIELDINT_ISSET_ID, value);
  }

  public long getFieldLong() {
    return this.fieldLong;
  }

  public void setFieldLong(long fieldLong) {
    this.fieldLong = fieldLong;
    setFieldLongIsSet(true);
  }

  public void unsetFieldLong() {
    __isset_bit_vector.clear(__FIELDLONG_ISSET_ID);
  }

  /** Returns true if field fieldLong is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldLong() {
    return __isset_bit_vector.get(__FIELDLONG_ISSET_ID);
  }

  public void setFieldLongIsSet(boolean value) {
    __isset_bit_vector.set(__FIELDLONG_ISSET_ID, value);
  }

  public double getFieldDouble() {
    return this.fieldDouble;
  }

  public void setFieldDouble(double fieldDouble) {
    this.fieldDouble = fieldDouble;
    setFieldDoubleIsSet(true);
  }

  public void unsetFieldDouble() {
    __isset_bit_vector.clear(__FIELDDOUBLE_ISSET_ID);
  }

  /** Returns true if field fieldDouble is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldDouble() {
    return __isset_bit_vector.get(__FIELDDOUBLE_ISSET_ID);
  }

  public void setFieldDoubleIsSet(boolean value) {
    __isset_bit_vector.set(__FIELDDOUBLE_ISSET_ID, value);
  }

  public String getFieldString() {
    return this.fieldString;
  }

  public void setFieldString(String fieldString) {
    this.fieldString = fieldString;
  }

  public void unsetFieldString() {
    this.fieldString = null;
  }

  /** Returns true if field fieldString is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldString() {
    return this.fieldString != null;
  }

  public void setFieldStringIsSet(boolean value) {
    if (!value) {
      this.fieldString = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD_BOOLEAN:
      if (value == null) {
        unsetFieldBoolean();
      } else {
        setFieldBoolean((Boolean)value);
      }
      break;

    case FIELD_BYTE:
      if (value == null) {
        unsetFieldByte();
      } else {
        setFieldByte((Byte)value);
      }
      break;

    case FIELD_SHORT:
      if (value == null) {
        unsetFieldShort();
      } else {
        setFieldShort((Short)value);
      }
      break;

    case FIELD_INT:
      if (value == null) {
        unsetFieldInt();
      } else {
        setFieldInt((Integer)value);
      }
      break;

    case FIELD_LONG:
      if (value == null) {
        unsetFieldLong();
      } else {
        setFieldLong((Long)value);
      }
      break;

    case FIELD_DOUBLE:
      if (value == null) {
        unsetFieldDouble();
      } else {
        setFieldDouble((Double)value);
      }
      break;

    case FIELD_STRING:
      if (value == null) {
        unsetFieldString();
      } else {
        setFieldString((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_BOOLEAN:
      return Boolean.valueOf(isFieldBoolean());

    case FIELD_BYTE:
      return Byte.valueOf(getFieldByte());

    case FIELD_SHORT:
      return Short.valueOf(getFieldShort());

    case FIELD_INT:
      return Integer.valueOf(getFieldInt());

    case FIELD_LONG:
      return Long.valueOf(getFieldLong());

    case FIELD_DOUBLE:
      return Double.valueOf(getFieldDouble());

    case FIELD_STRING:
      return getFieldString();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD_BOOLEAN:
      return isSetFieldBoolean();
    case FIELD_BYTE:
      return isSetFieldByte();
    case FIELD_SHORT:
      return isSetFieldShort();
    case FIELD_INT:
      return isSetFieldInt();
    case FIELD_LONG:
      return isSetFieldLong();
    case FIELD_DOUBLE:
      return isSetFieldDouble();
    case FIELD_STRING:
      return isSetFieldString();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThadoopSample)
      return this.equals((ThadoopSample)that);
    return false;
  }

  public boolean equals(ThadoopSample that) {
    if (that == null)
      return false;

    boolean this_present_fieldBoolean = true && this.isSetFieldBoolean();
    boolean that_present_fieldBoolean = true && that.isSetFieldBoolean();
    if (this_present_fieldBoolean || that_present_fieldBoolean) {
      if (!(this_present_fieldBoolean && that_present_fieldBoolean))
        return false;
      if (this.fieldBoolean != that.fieldBoolean)
        return false;
    }

    boolean this_present_fieldByte = true && this.isSetFieldByte();
    boolean that_present_fieldByte = true && that.isSetFieldByte();
    if (this_present_fieldByte || that_present_fieldByte) {
      if (!(this_present_fieldByte && that_present_fieldByte))
        return false;
      if (this.fieldByte != that.fieldByte)
        return false;
    }

    boolean this_present_fieldShort = true && this.isSetFieldShort();
    boolean that_present_fieldShort = true && that.isSetFieldShort();
    if (this_present_fieldShort || that_present_fieldShort) {
      if (!(this_present_fieldShort && that_present_fieldShort))
        return false;
      if (this.fieldShort != that.fieldShort)
        return false;
    }

    boolean this_present_fieldInt = true && this.isSetFieldInt();
    boolean that_present_fieldInt = true && that.isSetFieldInt();
    if (this_present_fieldInt || that_present_fieldInt) {
      if (!(this_present_fieldInt && that_present_fieldInt))
        return false;
      if (this.fieldInt != that.fieldInt)
        return false;
    }

    boolean this_present_fieldLong = true && this.isSetFieldLong();
    boolean that_present_fieldLong = true && that.isSetFieldLong();
    if (this_present_fieldLong || that_present_fieldLong) {
      if (!(this_present_fieldLong && that_present_fieldLong))
        return false;
      if (this.fieldLong != that.fieldLong)
        return false;
    }

    boolean this_present_fieldDouble = true && this.isSetFieldDouble();
    boolean that_present_fieldDouble = true && that.isSetFieldDouble();
    if (this_present_fieldDouble || that_present_fieldDouble) {
      if (!(this_present_fieldDouble && that_present_fieldDouble))
        return false;
      if (this.fieldDouble != that.fieldDouble)
        return false;
    }

    boolean this_present_fieldString = true && this.isSetFieldString();
    boolean that_present_fieldString = true && that.isSetFieldString();
    if (this_present_fieldString || that_present_fieldString) {
      if (!(this_present_fieldString && that_present_fieldString))
        return false;
      if (!this.fieldString.equals(that.fieldString))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_fieldBoolean = true && (isSetFieldBoolean());
    builder.append(present_fieldBoolean);
    if (present_fieldBoolean)
      builder.append(fieldBoolean);

    boolean present_fieldByte = true && (isSetFieldByte());
    builder.append(present_fieldByte);
    if (present_fieldByte)
      builder.append(fieldByte);

    boolean present_fieldShort = true && (isSetFieldShort());
    builder.append(present_fieldShort);
    if (present_fieldShort)
      builder.append(fieldShort);

    boolean present_fieldInt = true && (isSetFieldInt());
    builder.append(present_fieldInt);
    if (present_fieldInt)
      builder.append(fieldInt);

    boolean present_fieldLong = true && (isSetFieldLong());
    builder.append(present_fieldLong);
    if (present_fieldLong)
      builder.append(fieldLong);

    boolean present_fieldDouble = true && (isSetFieldDouble());
    builder.append(present_fieldDouble);
    if (present_fieldDouble)
      builder.append(fieldDouble);

    boolean present_fieldString = true && (isSetFieldString());
    builder.append(present_fieldString);
    if (present_fieldString)
      builder.append(fieldString);

    return builder.toHashCode();
  }

  public int compareTo(ThadoopSample other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThadoopSample typedOther = (ThadoopSample)other;

    lastComparison = Boolean.valueOf(isSetFieldBoolean()).compareTo(typedOther.isSetFieldBoolean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldBoolean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldBoolean, typedOther.fieldBoolean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldByte()).compareTo(typedOther.isSetFieldByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldByte, typedOther.fieldByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldShort()).compareTo(typedOther.isSetFieldShort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldShort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldShort, typedOther.fieldShort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldInt()).compareTo(typedOther.isSetFieldInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldInt, typedOther.fieldInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldLong()).compareTo(typedOther.isSetFieldLong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldLong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldLong, typedOther.fieldLong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldDouble()).compareTo(typedOther.isSetFieldDouble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldDouble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldDouble, typedOther.fieldDouble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldString()).compareTo(typedOther.isSetFieldString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldString, typedOther.fieldString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThadoopSample(");
    boolean first = true;

    if (isSetFieldBoolean()) {
      sb.append("fieldBoolean:");
      sb.append(this.fieldBoolean);
      first = false;
    }
    if (isSetFieldByte()) {
      if (!first) sb.append(", ");
      sb.append("fieldByte:");
      sb.append(this.fieldByte);
      first = false;
    }
    if (isSetFieldShort()) {
      if (!first) sb.append(", ");
      sb.append("fieldShort:");
      sb.append(this.fieldShort);
      first = false;
    }
    if (isSetFieldInt()) {
      if (!first) sb.append(", ");
      sb.append("fieldInt:");
      sb.append(this.fieldInt);
      first = false;
    }
    if (isSetFieldLong()) {
      if (!first) sb.append(", ");
      sb.append("fieldLong:");
      sb.append(this.fieldLong);
      first = false;
    }
    if (isSetFieldDouble()) {
      if (!first) sb.append(", ");
      sb.append("fieldDouble:");
      sb.append(this.fieldDouble);
      first = false;
    }
    if (isSetFieldString()) {
      if (!first) sb.append(", ");
      sb.append("fieldString:");
      if (this.fieldString == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldString);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThadoopSampleStandardSchemeFactory implements SchemeFactory {
    public ThadoopSampleStandardScheme getScheme() {
      return new ThadoopSampleStandardScheme();
    }
  }

  private static class ThadoopSampleStandardScheme extends StandardScheme<ThadoopSample> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThadoopSample struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_BOOLEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.fieldBoolean = iprot.readBool();
              struct.setFieldBooleanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.fieldByte = iprot.readByte();
              struct.setFieldByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD_SHORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.fieldShort = iprot.readI16();
              struct.setFieldShortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIELD_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fieldInt = iprot.readI32();
              struct.setFieldIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIELD_LONG
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fieldLong = iprot.readI64();
              struct.setFieldLongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FIELD_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fieldDouble = iprot.readDouble();
              struct.setFieldDoubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FIELD_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldString = iprot.readString();
              struct.setFieldStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThadoopSample struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetFieldBoolean()) {
        oprot.writeFieldBegin(FIELD_BOOLEAN_FIELD_DESC);
        oprot.writeBool(struct.fieldBoolean);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFieldByte()) {
        oprot.writeFieldBegin(FIELD_BYTE_FIELD_DESC);
        oprot.writeByte(struct.fieldByte);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFieldShort()) {
        oprot.writeFieldBegin(FIELD_SHORT_FIELD_DESC);
        oprot.writeI16(struct.fieldShort);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFieldInt()) {
        oprot.writeFieldBegin(FIELD_INT_FIELD_DESC);
        oprot.writeI32(struct.fieldInt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFieldLong()) {
        oprot.writeFieldBegin(FIELD_LONG_FIELD_DESC);
        oprot.writeI64(struct.fieldLong);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFieldDouble()) {
        oprot.writeFieldBegin(FIELD_DOUBLE_FIELD_DESC);
        oprot.writeDouble(struct.fieldDouble);
        oprot.writeFieldEnd();
      }
      if (struct.fieldString != null) {
        if (struct.isSetFieldString()) {
          oprot.writeFieldBegin(FIELD_STRING_FIELD_DESC);
          oprot.writeString(struct.fieldString);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThadoopSampleTupleSchemeFactory implements SchemeFactory {
    public ThadoopSampleTupleScheme getScheme() {
      return new ThadoopSampleTupleScheme();
    }
  }

  private static class ThadoopSampleTupleScheme extends TupleScheme<ThadoopSample> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThadoopSample struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFieldBoolean()) {
        optionals.set(0);
      }
      if (struct.isSetFieldByte()) {
        optionals.set(1);
      }
      if (struct.isSetFieldShort()) {
        optionals.set(2);
      }
      if (struct.isSetFieldInt()) {
        optionals.set(3);
      }
      if (struct.isSetFieldLong()) {
        optionals.set(4);
      }
      if (struct.isSetFieldDouble()) {
        optionals.set(5);
      }
      if (struct.isSetFieldString()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetFieldBoolean()) {
        oprot.writeBool(struct.fieldBoolean);
      }
      if (struct.isSetFieldByte()) {
        oprot.writeByte(struct.fieldByte);
      }
      if (struct.isSetFieldShort()) {
        oprot.writeI16(struct.fieldShort);
      }
      if (struct.isSetFieldInt()) {
        oprot.writeI32(struct.fieldInt);
      }
      if (struct.isSetFieldLong()) {
        oprot.writeI64(struct.fieldLong);
      }
      if (struct.isSetFieldDouble()) {
        oprot.writeDouble(struct.fieldDouble);
      }
      if (struct.isSetFieldString()) {
        oprot.writeString(struct.fieldString);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThadoopSample struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.fieldBoolean = iprot.readBool();
        struct.setFieldBooleanIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fieldByte = iprot.readByte();
        struct.setFieldByteIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fieldShort = iprot.readI16();
        struct.setFieldShortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fieldInt = iprot.readI32();
        struct.setFieldIntIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fieldLong = iprot.readI64();
        struct.setFieldLongIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fieldDouble = iprot.readDouble();
        struct.setFieldDoubleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fieldString = iprot.readString();
        struct.setFieldStringIsSet(true);
      }
    }
  }

}

